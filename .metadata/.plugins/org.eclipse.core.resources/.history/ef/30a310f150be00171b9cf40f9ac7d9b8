import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class Call {
    
    public static void main(String[] args) throws InterruptedException, ExecutionException{
        ExecutorService serv = Executors.newFixedThreadPool(2);//new ExecutorService();
        Race tortoise = new Race("Tortoise", 1000);
        Race rabbit = new Race("Rabbit", 500);
        Future<Integer> relts1 = serv.submit(tortoise);
        Future<Integer> relts2 = serv.submit(rabbit);
        Thread.sleep(2000);
        int num1 = relts1.get();
        int num2 = relts2.get();
        System.out.println(num1);
        System.out.println(num2);
        
        
        
    }

}
 class Race implements Callable<Integer>{
     
     private String  name;
     private long time;
     private boolean flag = true;
     private int step = 0;
     
     public Race(String name, long time){
         this.name=name;
         this.time=time;
     }
     

    @Override
    public Integer call() throws Exception {
        // TODO Auto-generated method stub
        
        while(flag){
            Thread.sleep(time);
            step++;

        } 
        return step;
    }
     
 }
